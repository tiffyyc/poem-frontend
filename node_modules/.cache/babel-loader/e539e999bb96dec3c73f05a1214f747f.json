{"ast":null,"code":"var _jsxFileName = \"/Users/TiffanyCheng/sei/projects/poem-frontend/poem-frontend/src/components/AutoDismissAlert/AutoDismissAlert.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; // We have imported some custom styling for this alert\n// Which will be off-topic, unless extra time at the end of the lesson.\n\nimport './AutoDismissAlert.scss';\nimport Alert from 'react-bootstrap/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AutoDismissAlert({\n  variant,\n  heading,\n  message\n}) {\n  _s();\n\n  // create `show` state. When this is false, the Alert will be hidden from the screen.\n  const [show, setShow] = useState(true); // We are going to create a timer that will stop showing the alert after 5 seconds\n  // We store the timeoutId, incase we need to cancel the timer early (because the AutoDismissAlert was unmounted)\n\n  const [timeoutId, setTimeoutId] = useState(null);\n  console.log(timeoutId); // this will run once, when the component is mounted (added) to the screen\n  // it runs once, because it has an empty dependency array as the second argument\n\n  useEffect(() => {\n    // We want to create a timer, that closes the alert after 5 seconds (5000 milliseconds)\n    const id = setTimeout(() => setShow(false), 5000); // Keep track of the timeoutId\n\n    setTimeoutId(id); // We want to clean up the timer\n    // this is like componentWillUnmount, it is run whenever the component is unmounted\n    // and its also run before an effect is re-created\n\n    return function cleanup() {\n      clearTimeout(timeoutId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Alert\n  /* This is the color, make it the bootstrap passed down as a prop */\n  , {\n    variant: variant\n    /* This function sets the show state to false, whenever the x in the top right is clicked. */\n    ,\n    onClose: () => setShow(false)\n    /* This adds a close button to our alert */\n    ,\n    dismissible: true\n    /* The show property will display the alert if true, and hide it if false. */\n    ,\n    show: show,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n        children: heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert-body\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoDismissAlert, \"9pJNEBRAWqZycM0nFR0UWfb+ios=\");\n\n_c = AutoDismissAlert;\nexport default AutoDismissAlert;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoDismissAlert\");","map":{"version":3,"sources":["/Users/TiffanyCheng/sei/projects/poem-frontend/poem-frontend/src/components/AutoDismissAlert/AutoDismissAlert.js"],"names":["React","useEffect","useState","Alert","AutoDismissAlert","variant","heading","message","show","setShow","timeoutId","setTimeoutId","console","log","id","setTimeout","cleanup","clearTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;AACA;;AACA,OAAO,yBAAP;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,SAASC,gBAAT,CAA2B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA;AAApB,CAA3B,EAA0D;AAAA;;AACxD;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC,CAFwD,CAGxD;AACA;;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ,EANwD,CAQxD;AACA;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMa,EAAE,GAAGC,UAAU,CAAC,MAAMN,OAAO,CAAC,KAAD,CAAd,EAAuB,IAAvB,CAArB,CAFc,CAGd;;AACAE,IAAAA,YAAY,CAACG,EAAD,CAAZ,CAJc,CAMd;AACA;AACA;;AACA,WAAO,SAASE,OAAT,GAAoB;AACzBC,MAAAA,YAAY,CAACP,SAAD,CAAZ;AACD,KAFD;AAGD,GAZQ,EAYN,EAZM,CAAT;AAcA,sBACE,QAAC;AACC;AADF;AAEE,IAAA,OAAO,EAAEL;AACT;AAHF;AAIE,IAAA,OAAO,EAAE,MAAMI,OAAO,CAAC,KAAD;AACtB;AALF;AAME,IAAA,WAAW;AACX;AAPF;AAQE,IAAA,IAAI,EAAED,IARR;AAAA,2BAUE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE,QAAC,KAAD,CAAO,OAAP;AAAA,kBAAgBF;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA,kBAA2BC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAzCQH,gB;;KAAAA,gB;AA2CT,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\n\n// We have imported some custom styling for this alert\n// Which will be off-topic, unless extra time at the end of the lesson.\nimport './AutoDismissAlert.scss'\nimport Alert from 'react-bootstrap/Alert'\n\nfunction AutoDismissAlert ({ variant, heading, message }) {\n  // create `show` state. When this is false, the Alert will be hidden from the screen.\n  const [show, setShow] = useState(true)\n  // We are going to create a timer that will stop showing the alert after 5 seconds\n  // We store the timeoutId, incase we need to cancel the timer early (because the AutoDismissAlert was unmounted)\n  const [timeoutId, setTimeoutId] = useState(null)\n  console.log(timeoutId)\n\n  // this will run once, when the component is mounted (added) to the screen\n  // it runs once, because it has an empty dependency array as the second argument\n  useEffect(() => {\n    // We want to create a timer, that closes the alert after 5 seconds (5000 milliseconds)\n    const id = setTimeout(() => setShow(false), 5000)\n    // Keep track of the timeoutId\n    setTimeoutId(id)\n\n    // We want to clean up the timer\n    // this is like componentWillUnmount, it is run whenever the component is unmounted\n    // and its also run before an effect is re-created\n    return function cleanup () {\n      clearTimeout(timeoutId)\n    }\n  }, [])\n\n  return (\n    <Alert\n      /* This is the color, make it the bootstrap passed down as a prop */\n      variant={variant}\n      /* This function sets the show state to false, whenever the x in the top right is clicked. */\n      onClose={() => setShow(false)}\n      /* This adds a close button to our alert */\n      dismissible\n      /* The show property will display the alert if true, and hide it if false. */\n      show={show}\n    >\n      <div className='container'>\n        <Alert.Heading>{heading}</Alert.Heading>\n        <p className='alert-body'>{message}</p>\n      </div>\n    </Alert>\n  )\n}\n\nexport default AutoDismissAlert\n"]},"metadata":{},"sourceType":"module"}